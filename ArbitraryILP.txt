ILP := procedure(V:B:=[],C:=[])	
  //V is any finite set of vectors belonging to the same vector space
  //B is any set of bases consisting of vectors in V, default it generate all possible
  //C is any non-basis set of sets of pairwise orthogonal elements of V, default it to generate all possible
  
  d:=Degree(Random(V)); //gets order of vectors

  if B eq [] then
  B:=Setseq({b: b in Subsets(V,d)| forall{{u,v}:u,v in b|Round(1000*Modulus(InnerProduct(u,v))) eq 0 or u eq v}}); //bases
  end if;
  if C eq [] then
  C:=Setseq(&join{{c: c in Subsets(V,k)|forall{{u,v}:u,v in c|Round(1000*Modulus(InnerProduct(u,v))) eq 0 or u eq v}}: k in [2..(d-1)]}); //non-basis orthsets
  end if;
  
  n:=#V; //number of vectors
  m:=#B; //number bases
  l:=#C; //number of non-basis orthsets
  
  V:=Setseq(V);
  R:=RealField();

  lhs:=Matrix(R,m+l,n,[]);
  for i:=1 to m+l do
    for j:=1 to n do
      if i lt m+1 then
        if V[j] in B[i] then
          lhs[i][j]:=1;
        else
          lhs[i][j]:=0;
        end if;
      else
        if V[j] in C[i-m] then
          lhs[i][j]:=1;
        else
          lhs[i][j]:=0;
        end if;
      end if;
    end for;
    
  end for;
  

  rhs:=Matrix(R,m+l,1,[1^^(m+l)]);
  rel:=Matrix(R,m+l,1,[0^^(m),(-1)^^(l)]);
  obj:=Matrix(R,1,n,[0^^(n)]);
  
  a,b:=MaximalZeroOneSolution(lhs,rel,rhs,obj);
  
  if b eq 0 then //output the result of the ILP
    printf "Solution Exists\n\n";//"Optimal Solution:\n%o",a;
  elif b eq 1 or b eq 4 then
    printf "Failure";
  elif b eq 2 then
    printf "**Infeasible problem**\n";
    printf "Vectors: %o\n\n",n;
    printf "Bases: %o\n\n%o\n\n Non-Basis Orthogonal Sets: %o\n\n%o\n\n",m,m,l,l;
    
  elif b eq 3 then
    printf "Unbounded problem";
  end if;
end procedure;

//Conway Kochen 31-Vector Example
Q:=[[2,2,2],[1,1,2],[1,0,2],[1,-1,2],[0,-1,2],[0,0,2],[0,1,2],[0,2,2],[-1,-1,2],[-1,0,2],[-1,1,2],[-2,0,2],[-2,2,2],[-2,-1,1],[-2,-1,0],[-2,-1,-1],[-2,0,1],[-2,0,0],[-2,0,-1],[-2,0,-2],[-2,2,0],[-2,2,-2],[-1,2,1],[0,2,1],[-1,2,0],[0,2,0],[2,2,0],[-1,2,-1],[0,2,-1],[0,2,-2],[2,2,-2]];
V:={VectorSpace(Rationals(),3)!v:v in Q};
	