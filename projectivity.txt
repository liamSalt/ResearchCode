Q3:=VectorSpace(Rationals(),3);

Q37 := {Q3!u: u in [[1,1,1],[1,1,2],[1,0,2],[1,-1,2],[0,1,-2],[0,0,1],[0,1,2],[0,1,1],[1,1,-2],[1,0,-2],[-1,1,2],[1,0,-1],[-1,1,1],[2,1,-1],[2,1,0],[2,1,1],[2,0,-1],[1,0,0],[2,0,1],[1,0,1],[1,-1,0],[1,-1,1],[-1,2,1],[0,2,1],[1,-2,0],[0,1,0],[1,1,0],[1,-2,1],[0,2,-1],[0,1,-1],[1,1,-1],[2,-1,0],[1,2,0],[-2,1,1],[1,2,-1],[1,2,1],[2,-1,1]]};

//Conway-Kochen Set
CK:= Q37 diff {Q3!u: u in [[2,-1,0],[1,2,0],[-2,1,1],[1,2,-1],[1,2,1],[2,-1,1]]};
Q85:={Q3!u:u in [[1, 0, 0], [0, 1, 0], [0, 0, 1], [1, 1, 0], [1, 0, 1], [0, 1, 1], [1, -1, 0], [1, 0, -1], [0, 1, -1], [1, 1, 1], [1, 1, -1], [1, -1, 1], [-1, 1, 1], [1, 1, 2], [1, 2, 1], [2, 1, 1], [-1, 1, 2], [-1, 2, 1], [-2, 1, 1], [1, -1, 2], [1, -2, 1], [2, -1, 1], [1, 1, -2], [1, 2, -1], [2, 1, -1], [1, 2, 4], [1, 4, 2], [2, 1, 4], [2, 4, 1], [4, 1, 2], [4, 2, 1], [-1, 2, 4], [-1, 4, 2], [-2, 1, 4], [-2, 4, 1], [-4, 1, 2], [-4, 2, 1], [1, -2, 4], [1, -4, 2], [2, -1, 4], [2, -4, 1], [4, -1, 2], [4, -2, 1], [1, 2, -4], [1, 4, -2], [2, 1, -4], [2, 4, -1], [4, 1, -2], [4, 2, -1], [2, 2, 5], [2, 5, 2], [5, 2, 2], [-2, 2, 5], [-2, 5, 2], [-5, 2, 2], [2, -2, 5], [2, -5, 2], [5, -2, 2], [2, 2, -5], [2, 5, -2], [5, 2, -2], [2, 3, 8], [2, 8, 3], [3, 2, 8], [3, 8, 2], [8, 2, 3], [8, 3, 2], [-2, 3, 8], [-2, 8, 3], [-3, 2, 8], [-3, 8, 2], [-8, 2, 3], [-8, 3, 2], [2, -3, 8], [2, -8, 3], [3, -2, 8], [3, -8, 2], [8, -2, 3], [8, -3, 2], [2, 3, -8], [2, 8, -3], [3, 2, -8], [3, 8, -2], [8, 2, -3], [8, 3, -2]]};



L:=function(P,Q)
	a:= Coordinates(VectorSpaceWithBasis([P[i]:i in [1..3]]),P[4]);
	b:= Coordinates(VectorSpaceWithBasis([Q[i]:i in [1..3]]),Q[4]);
    
	A:= Matrix(Rationals(),3,3,&cat[Eltseq(P[i]):i in [1..3]]);
	Ainv:=A^(-1);
	B:= Matrix(Rationals(),3,3,&cat[Eltseq(b[i]/a[i]*Q[i]):i in [1..3]]);
    
	return Ainv*B;
end function;

AG := function(V:mem:=false)
	
	if not mem then
	//finds 4-seqs such that all its 3-subsets are L.I.
	M:={U: U in Permutations(V,4)|forall{T:T in Subsets(Set(U),3)|Rank(Matrix(Rationals(),3,3,&cat[Eltseq(t):t in T])) eq 3}};
	print "Finding generators\n";
	//random fixed frame
	P:=Random(M);
	
	gen:={};
	
	for Q in M do
		T:=L(P,Q);
		if {sub<Q3|p*T>:p in V} eq {sub<Q3|p>: p in V} then gen:= gen join {T};printf "%o\n",T;end if;
	end for;
	
	else
	
		repeat P:={Random(V):i in [1..4]}; until #P eq 4 and forall{T:T in Subsets(P,3)|Rank(Matrix(Rationals(),3,3,&cat[Eltseq(t):t in T])) eq 3};
		print "Finding generators\n";
		
		P:=Setseq(P);
		gen:={};
		V:=Setseq(V);
		
		for a,b,c,d in V do
			if #{a,b,c,d} eq 4 and forall{T:T in Subsets(Set([a,b,c,d]),3)|Rank(Matrix(Rationals(),3,3,&cat[Eltseq(t):t in T])) eq 3} then
				T:=L(P,[a,b,c,d]);
				if {sub<Q3|p*T>:p in V} eq {sub<Q3|p>: p in V} then
					gen:= gen join {T};
					printf "%o\n",T;
				end if;
			end if;
		end for;
	end if;
		

	G:=sub<GL(3,Rationals())|gen>;

	printf "small group type %o\n", IdentifyGroup(G);
	return G;
end function;

AG(CK);

//test
/* P:=Random(M);
Q:=Random(M diff {P});

printf "Set P:\n%o\n",P;
printf "Set Q:\n%o\n",Q;
printf "Linear Transformation:\n%o\n",L(P,Q);

P:=Setseq(P);
a:= Coordinates(VectorSpaceWithBasis([P[i]:i in [1..3]]),P[4]);
printf "P[4] eq sum P[i] %o\n",P[4] eq &+{a[i]*P[i]:i in [1..3]};
Q:=Setseq(Q);
b:= Coordinates(VectorSpaceWithBasis([Q[i]:i in [1..3]]),Q[4]);
printf "Q[4] eq sum Q[i] %o\n",Q[4] eq &+{b[i]*Q[i]:i in [1..3]};


for i in [1..3] do printf"L(P[%o]) eq b[%o]/a[%o]*Q[%o] %o\n",i,i,i,i,P[i]*L(Set(P),Set(Q)) eq b[i]/a[i]*Q[i];end for; */
